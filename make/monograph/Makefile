#
# AlbLaTeX/make/monograph/Makefile
#
#     Copyright (C) 2003-2008, 2012-2013 Andrew Lincoln Burrow
#
#     This library is free software; you can redistribute it and/or
#     modify it under the terms of the GNU General Public License as
#     published by the Free Software Foundation; either version 2 of
#     the License, or (at your option) any later version.
#
#     This library is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public
#     License along with this library; if not, write to the Free
#     Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
#     MA 02111-1307, USA.
#
#   - Makefile to automate application of pdflatex(1), bibtex(1), and
#     makeindex(1) to a single complex LaTeX documents using detailed
#     dependency information gathered by parsing source files
#
#   - This makefile is preferred over AlbLaTeX/make/serial/Makefile for
#     single complex documents, because it is simpler to extend to
#     unusual LaTeX extensions that might be present in a large project
#
#   - The makefile is parameterised by $(TEX_MASTER).  The actions
#     taken are determined by searching for the commands:
#
#	  \documentclass, \usepackage, \makeindex, \makeglossary,
#	  \tableofcontents, \listoffigures, \listoftables,
#	  \listofalgorithms, \include, \input, \includegraphics, and
#	  \bibliography
#
#     The search is complicated by comments, the verbatim commands and
#     environments, and the interaction between these structures.
#
#     In practice, this places the following limitations on the LaTeX
#     source code:
#
#	+ issue each of the above commands on a separate line, apart
#	  from other instances of the same command, and apart from any
#	  of the various verbatim commands and environments; and
#
#	+ include each graphic by a filename with an extension.
#

#
# Description
#
# Set the master file for the project, all other source files will be
# located by parsing and searching along ${TEXINPUTS}, ${BIBINPUTS}, and
# ${INDEXSTYLE}

PROJECT		= AlbLaTeX-MakefileForMonograph
RELEASE		= draft
TEX_MASTER	= example-book.tex

#
# Programs
#
# Programs and their options for the compilation and installation steps

KPSEWHICH	= kpsewhich DUMMY
PDFLATEX	= pdflatex -interaction=nonstopmode
BIBTEX		= bibtex
MAKEINDEX	= makeindex

TOUCH		= touch -c DUMMY

#
# ------------------------ DO NOT EDIT BELOW THIS LINE ------------------------
#

#
# Rule processing
#
# Turn off suffix rules.  Mandate the bash(1) shell

.SUFFIXES:
SHELL		= /bin/bash

#
# Default target
#
# Process all master files

.PHONY:			all
all:			$(TEX_MASTER:%.tex=%.pdf)

#
# Dependency files
#
# The dependency file for each master and included file contains the
# following variables, one instance for each file, where % is replaced
# by the basename of the file less the extension.
#
# INP_FILES_%
#   Basenames of LaTeX files inputted by the file.
#
# GRF_FILES_%
#   Relative filenames of graphics files inputted by the file.
#
# PRE_AUX_FILES_%
#   Basenames of intermediate files generated by LaTeX.  For included
#   files, the filenames are generated from the included filename.  See
#   'AUX_FILES' below.
#
# PRE_BIB_FILES_%
#   Basenames of bibliographic databases required by BibTeX.  The
#   filenames do not include extensions.  See 'BIB_FILES' below.
#
# PRE_BBL_FILES_%
#   Basenames of bibliographic files generated by BibTeX.  For included
#   files, the filenames are generated from the included filename.  See
#   'BBL_FILES' below.
#
# The dependency file for the master file contains the following
# additional variables.
#
# CLS_NAME
#   Name of the LaTeX class for the document.
#
# OPT_NAMES
#   Names of the document options.
#
# PKG_NAMES
#   Names of LaTeX packages explicitly loaded by the document.
#
# IDX_FILES
#   Basename of files generated by LaTeX and required to generate
#   indices.
#
# INC_FILES
#   Basenames of LaTeX files included by the document.

include $(TEX_MASTER:%.tex=%.d)
include $(INC_FILES:%.tex=%.d)

#
# Intermediate files
#
# The following variables determine the intermediate files required to
# converge to a final document.  These variables are defined once the
# per-file variables in the dependency files are loaded.
#
# INP_FILES
#   Basenames of LaTeX files inputted by the included file, or for the
#   master file, inputted by the master file and its included files.
#
# GRF_FILES
#   Relative filenames of graphics files inputted by the included file,
#   or for a master file, inputted by the master file and its included
#   files.
#
# BIB_FILES
#   Basenames of bibliographic databases required by BibTex to generate
#   the files in 'BBL_FILES_%'.
#
# AUX_FILES
#   Basenames of files generated by LaTeX and required for convergence
#   to correct front matter.  The list is created from 'PRE_AUX_FILES_%'
#   by correction for basenames and extensions according to rules for
#   particular classes and packages.
#
# BBL_FILES
#   Basenames of files generated by BibTeX and required for convergence
#   to correct front matter.  The list is created from 'PRE_BBL_FILES_%'
#   by correction for basenames and extensions according to rules for
#   particular classes and packages.
#
# IND_FILES
#   Basename of files generated by makeindex and required for
#   convergence to final document.

INP_FILES := \
	$(sort \
	    $(foreach i, $(TEX_MASTER:%.tex=%) $(INC_FILES:%.tex=%), \
		$(INP_FILES_$(i))))

GRF_FILES := \
	$(sort \
	    $(foreach i, $(TEX_MASTER:%.tex=%) $(INC_FILES:%.tex=%), \
		$(GRF_FILES_$(i))))

AUX_FILES := \
	$(sort \
	    $(TEX_MASTER:%.tex=%.aux) \
	    $(TEX_MASTER:%.tex=%.log) \
	    $(INC_FILES:%.tex=%.aux) \
	    $(if $(filter hyperref, $(PKG_NAMES)), \
		$(TEX_MASTER:%.tex=%.out)) \
	    $(if $(filter beamer, $(CLS_NAME)), \
		$(TEX_MASTER:%.tex=%.nav) $(TEX_MASTER:%.tex=%.out) \
		$(TEX_MASTER:%.tex=%.snm)) \
	    $(foreach i, $(TEX_MASTER:%.tex=%) $(INC_FILES:%.tex=%), \
		$(patsubst %.toc, $(TEX_MASTER:%.tex=%.toc), \
		    $(filter %.toc, $(PRE_AUX_FILES_$(i)))) \
		$(patsubst %.lof, $(TEX_MASTER:%.tex=%.lof), \
		    $(filter %.lof, $(PRE_AUX_FILES_$(i)))) \
		$(patsubst %.lot, $(TEX_MASTER:%.tex=%.lot), \
		    $(filter %.lot, $(PRE_AUX_FILES_$(i)))) \
		$(patsubst %.loa, $(TEX_MASTER:%.tex=%.loa), \
		    $(filter %.loa, $(PRE_AUX_FILES_$(i))))))

BIB_FILES := \
	$(sort \
	    $(shell $(KPSEWHICH) \
		$(foreach i, $(TEX_MASTER:%.tex=%) $(INC_FILES:%.tex=%), \
		    $(patsubst %, %.bib, $(PRE_BIB_FILES_$(i))))))

BBL_FILES := \
	$(sort \
	    $(if $(filter chapterbib, $(PKG_NAMES)), \
		$(foreach i, $(TEX_MASTER:%.tex=%) $(INC_FILES:%.tex=%), \
		    $(PRE_BBL_FILES_$(i))), \
		$(foreach i, $(TEX_MASTER:%.tex=%) $(INC_FILES:%.tex=%), \
		    $(patsubst %.bbl, $(TEX_MASTER:%.tex=%.bbl), \
			$(filter %.bbl, $(PRE_BBL_FILES_$(i)))))))

IND_FILES := \
	$(sort \
	    $(patsubst %.glo, %.gls, \
		$(filter %.glo, $(IDX_FILES))) \
	    $(patsubst %.idx, %.ind, \
		$(filter %.idx, $(IDX_FILES))))

#
# Standard targets
#
# See 'standards.info' for a description of the GNU makefile conventions

.PHONY:			install
install:		all installdirs
	@echo 'install: Not implemented'

.PHONY:			installdirs
installdirs:
	@echo 'installdirs: Not implemented'

.PHONY:			uninstall
uninstall:
	@echo 'uninstall: Not implemented'

.PHONY:			maintainer-clean
maintainer-clean:	distclean

.PHONY:			distclean
distclean:		clean
	rm -f $(TEX_MASTER:%.tex=%.d)
	rm -f $(INC_FILES:%.tex=%.d)

.PHONY:			clean
clean:			mostlyclean
	rm -f $(TEX_MASTER:%.tex=%.pdf)

.PHONY:			mostlyclean
mostlyclean:
	rm -f $(AUX_FILES)
	rm -f $(strip $(patsubst %.bbl, %.blg, $(BBL_FILES)))
	rm -f $(BBL_FILES)
	rm -f $(strip $(patsubst %.gls, %.ilg, $(IND_FILES)))
	rm -f $(strip $(patsubst %.ind, %.ilg, $(IND_FILES)))
	rm -f $(IDX_FILES)
	rm -f $(IND_FILES)

.PHONY:			dist
dist:
	@echo 'dist: Not implemented'

.PHONY:			check
check:
	@echo '$(strip CLS_NAME = $(CLS_NAME))'
	@echo '$(strip OPT_NAMES = $(OPT_NAMES))'
	@echo '$(strip PKG_NAMES = $(PKG_NAMES))'
	@echo '$(strip INC_FILES = $(INC_FILES))'
	@echo '$(strip INP_FILES = $(INP_FILES))'
	@echo '$(strip GRF_FILES = $(GRF_FILES))'
	@echo '$(strip BIB_FILES = $(BIB_FILES))'
	@echo '$(strip AUX_FILES = $(AUX_FILES))'
	@echo '$(strip BBL_FILES = $(BBL_FILES))'
	@echo '$(strip IDX_FILES = $(IDX_FILES))'
	@echo '$(strip IND_FILES = $(IND_FILES))'

#
# Label manipulation targets
#
# The following targets support the LaTeX packages in AlbLaTeX.  Each
# target rewrites LaTeX source for a class of labels for numbered items.
# The rewriting updates the labels in the source code, so that numbers
# in the labels match the numbers in the most recently formatted
# document.  The purpose is to simplify the translation of mark ups on a
# formatted document to edits on the document source

.PHONY:			alb-relabel-eq
alb-relabel-eq:		$(TEX_MASTER:%.tex=%.pass_2)
	@echo
	@echo "This target edits the LaTeX source in an attempt to match"
	@echo "equation labels to equation numbers."
	@echo "Labels of the form eq:IDENTIFIER:NUMBER are processed."
	@echo "NUMBER is rewritten to the last part of the equation number."
	RE_NUM_LBL='\(\(eq\):[0-9A-Za-z_-]\+:\)\([0-9]\+\)'; \
	RE_TMP_LBL="$${RE_NUM_LBL}-tmp"; \
	RE_NUM='\([0-9]\+.\)*\([0-9]\+\)'; \
	RE_AUX="^\\\\newlabel{$${RE_NUM_LBL}}{{$${RE_NUM}}.*"; \
	cat $(TEX_MASTER:%.tex=%.aux) $(INC_FILES:%.tex=%.aux) \
	    | grep -e "$${RE_AUX}" \
	    | sed -e "s/$${RE_AUX}/s#{\1\3}#{\1\5-tmp}#g/" \
	    > $(TEX_MASTER:%.tex=%.relabel-rules) ; \
	if	grep -q \
		    -e "$${RE_TMP_LBL}" \
		    $(TEX_MASTER:%.tex=%.aux) $(INC_FILES:%.tex=%.aux) ; \
	then \
	    echo -e "\n\nError: Temporary labels present" >&2 ; \
	    exit 1 ; \
	fi ; \
	if [	$$(cat $(TEX_MASTER:%.tex=%.relabel-rules) \
		    | sed -e 's/s#{\([^#]*\)}#{\([^#]*\)}#g/\1/' \
		    | sort -u \
		    | wc -l) \
		-ne \
		$$(cat $(TEX_MASTER:%.tex=%.relabel-rules) \
		    | sed -e 's/s#{\([^#]*\)}#{\([^#]*\)}#g/\2/' \
		    | sort -u \
		    | wc -l)	 ] ; \
	then \
	    echo -e "\n\nError: Label clashes" >&2 ; \
	    exit 1 ; \
	fi ; \
	for f in $(TEX_MASTER) $(INC_FILES) ; do \
	    sed \
		-f $(TEX_MASTER:%.tex=%.relabel-rules) \
		-e "s/{$${RE_TMP_LBL}}/{\1\3}/g" \
		< $$f \
		> $$f.relabelled ; \
	    if ! cmp -s $$f $$f.relabelled ; then \
		mv $$f.relabelled $$f ; \
	    else \
		rm $$f.relabelled ; \
	    fi ; \
	done
	rm -f $(TEX_MASTER:%.tex=%.relabel-rules)


.PHONY:			alb-relabel-thm
alb-relabel-thm:	$(TEX_MASTER:%.tex=%.pass_2)
	@echo
	@echo "This target edits the LaTeX source in an attempt to match"
	@echo "theorem labels to theorem numbers."
	@echo "Labels of the form THM:IDENTIFIER:NUMBER are processed, where"
	@echo "THM is one of 'thm', 'lem', 'rem', or 'cor'."
	@echo "NUMBER is rewritten to the last part of the theorem number."
	RE_NUM_LBL='\(\(thm\|lem\|rem\|cor\):[0-9A-Za-z_-]\+:\)\([0-9]\+\)'; \
	RE_TMP_LBL="$${RE_NUM_LBL}-tmp"; \
	RE_NUM='\([0-9]\+.\)*\([0-9]\+\)'; \
	RE_AUX="^\\\\newlabel{$${RE_NUM_LBL}}{{$${RE_NUM}}.*"; \
	cat $(TEX_MASTER:%.tex=%.aux) $(INC_FILES:%.tex=%.aux) \
	    | grep -e "$${RE_AUX}" \
	    | sed -e "s/$${RE_AUX}/s#{\1\3}#{\1\5-tmp}#g/" \
	    > $(TEX_MASTER:%.tex=%.relabel-rules) ; \
	if	grep -q \
		    -e "$${RE_TMP_LBL}" \
		    $(TEX_MASTER:%.tex=%.aux) $(INC_FILES:%.tex=%.aux) ; \
	then \
	    echo -e "\n\nError: Temporary labels present" >&2 ; \
	    exit 1 ; \
	fi ; \
	if [	$$(cat $(TEX_MASTER:%.tex=%.relabel-rules) \
		    | sed -e 's/s#{\([^#]*\)}#{\([^#]*\)}#g/\1/' \
		    | sort -u \
		    | wc -l) \
		-ne \
		$$(cat $(TEX_MASTER:%.tex=%.relabel-rules) \
		    | sed -e 's/s#{\([^#]*\)}#{\([^#]*\)}#g/\2/' \
		    | sort -u \
		    | wc -l)	 ] ; \
	then \
	    echo -e "\n\nError: Label clashes" >&2 ; \
	    exit 1 ; \
	fi ; \
	for f in $(TEX_MASTER) $(INC_FILES) ; do \
	    sed \
		-f $(TEX_MASTER:%.tex=%.relabel-rules) \
		-e "s/{$${RE_TMP_LBL}}/{\1\3}/g" \
		< $$f \
		> $$f.relabelled ; \
	    if ! cmp -s $$f $$f.relabelled ; then \
		mv $$f.relabelled $$f ; \
	    else \
		rm $$f.relabelled ; \
	    fi ; \
	done
	rm -f $(TEX_MASTER:%.tex=%.relabel-rules)


.PHONY:			alb-relabel-ln
alb-relabel-ln:		$(TEX_MASTER:%.tex=%.pass_2)
	@echo
	@echo "This target edits the LaTeX source in an attempt to match"
	@echo "labels on algorithm lines with actual numbers."
	@echo "Labels of the form 'ln:IDENTIFIER:IDENTIFIER:LINE' and"
	@echo "'ln:IDENTIFIER:IDENTIFIER-LINE' are processed, where LINE"
	@echo "is a number or a lowercase letter followed by a number."
	@echo "LINE is rewritten to the line number, and the preceeding"
	@echo "separator is rewritten to ':'."
	RE_ID='[0-9A-Za-z_-]\+' ; \
	RE_LN='[a-z]\?[0-9]\+' ; \
	RE_NUM_LBL="\\(\\(ln\\):$${RE_ID}:$${RE_ID}[:-]\\)\\($${RE_LN}\\)"; \
	RE_TMP_LBL="$${RE_NUM_LBL}-tmp"; \
	RE_NUM='\\textsc *{\([a-z]\)}\([0-9]\+\)'; \
	RE_AUX="^\\\\newlabel{$${RE_NUM_LBL}}{{$${RE_NUM}}.*"; \
	cat $(TEX_MASTER:%.tex=%.aux) $(INC_FILES:%.tex=%.aux) \
	    | grep -e "$${RE_AUX}" \
	    | sed -e "s/$${RE_AUX}/s#{\1\3}#{\1\4\5-tmp}#g/" \
		 -e "s/-\\($${RE_LN}\\)-tmp}#g/:\1-tmp}#g/" \
	    > $(TEX_MASTER:%.tex=%.relabel-rules) ; \
	if	grep -q \
		    -e "$${RE_TMP_LBL}" \
		    $(TEX_MASTER:%.tex=%.aux) $(INC_FILES:%.tex=%.aux) ; \
	then \
	    echo -e "\n\nError: Temporary labels present" >&2 ; \
	    exit 1 ; \
	fi ; \
	if [	$$(cat $(TEX_MASTER:%.tex=%.relabel-rules) \
		    | sed -e 's/s#{\([^#]*\)}#{\([^#]*\)}#g/\1/' \
		    | sort -u \
		    | wc -l) \
		-ne \
		$$(cat $(TEX_MASTER:%.tex=%.relabel-rules) \
		    | sed -e 's/s#{\([^#]*\)}#{\([^#]*\)}#g/\2/' \
		    | sort -u \
		    | wc -l)	 ] ; \
	then \
	    echo -e "\n\nError: Label clashes" >&2 ; \
	    exit 1 ; \
	fi ; \
	for f in $(TEX_MASTER) $(INC_FILES) ; do \
	    sed \
		-f $(TEX_MASTER:%.tex=%.relabel-rules) \
		-e "s/{$${RE_TMP_LBL}}/{\1\3}/g" \
		< $$f \
		> $$f.relabelled ; \
	    if ! cmp -s $$f $$f.relabelled ; then \
		mv $$f.relabelled $$f ; \
	    else \
		rm $$f.relabelled ; \
	    fi ; \
	done
	rm -f $(TEX_MASTER:%.tex=%.relabel-rules)

#
# Dependencies rules
#
# For the master file and each included file, we construct the
# dependency files described above, in the form of a makefile with the
# extension '.d'.  The first rule generates makefiles for master files,
# the second rule generates makefiles for included files.
#
# The LaTeX source is parsed in the following steps.
#
#   + Discard \\ commands to avoid confusion recognising escapes.
#
#   + Discard \% commands to avoid confusion recognising comments.
#
#   + Discard comments.
#
#   + Discard lines containing \verb and \verb* commands.
#
#   + Discard sequences of lines spanned by 'verbatim' and 'verbatim*'
#     environments.
#
#   + For \documentclass, search the preamble to locate the command.
#     Collect the first square brace delimited argument and first curly
#     brace delimited argument by searches beginning at the line
#     containing the command.
#
#   + For \usepackage, search the preamble to locate the command.
#     Collect the first brace delimited argument by a search which
#     begins at the line containing the command.
#
#   + For \include, search the body to locate the command.  Collect the
#     first brace delimited argument by a search which begins at the
#     line containing the command.  Append '.tex' to the argument.
#
#   + For each of \makeindex and \makeglossary, search the preamble to
#     locate the command.  Record the basename of the file in which
#     command occurred replacing '.tex' by '.glo', or '.idx' as
#     appropriate.
#
#   + For each of \tableofcontents, \listoffigures, and
#     \listofalgorithms, search the body to locate the command.	 Record
#     the basename of the file in which command occurred replacing
#     '.tex' by '.toc', '.lof', '.lot', or '.loa' as appropriate.
#
#   + For \input, search the body to locate the command.  Collect the
#     first brace delimited argument  by a search which begins at the
#     line containing the command.  Append '.tex' to the argument.
#
#   + For \includegraphics, search the body to locate the command.
#     Collect the first brace delimited argument by a search which
#     begins at the line containing the command.  No extension is
#     appended to the argument.
#
#   + For \bibliography, search the body to locate the command.
#     Record the basename of the file in which command occurred.

$(TEX_MASTER:%.tex=%.d): \
%.d:									\
		%.tex
	@echo
	@echo '# Rebuilding dependencies for master file: $<'
	sed \
	    -e 's/\\\\//g' \
	    -e 's/\\%//g' \
	    -e 's/^\([^%]*\)%.*/\1/' \
	    -e 's/^.*\\verb\>.*//' \
	    -e '/\\begin{verbatim\*\?}/,/\\end{verbatim\*\?}/ s/.*//' \
	    < $< \
	    > $(<:%.tex=%.stripped)
	sed \
	    -e '/\\begin{document}/,/\\end{document}/ d' \
	    < $(<:%.tex=%.stripped) \
	    > $(<:%.tex=%.preamble)
	sed \
	    -e '0,/\\begin{document}/ d' \
	    < $(<:%.tex=%.stripped) \
	    > $(<:%.tex=%.body)
	echo '### ALB LATEX MAGIC' > $@
	echo '# This makefile describes '$<'.' >> $@
	echo '# It is generated and overwritten by make(1).' >> $@
	echo '# Do not edit by hand.' >> $@
	echo -n 'CLS_NAME = ' >> $@
	sed \
	    -e '/\\documentclass\>.*{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e '/\\documentclass\>/,/{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    < $(<:%.tex=%.preamble) \
	    | xargs echo -n >> $@
	echo >> $@
	echo -n 'OPT_NAMES = ' >> $@
	sed \
	    -e '/\\documentclass\>.*{/ s/^[^[]*\(\[\(.*\)\]\)\?.*/%\2/' \
	    -e '/\\documentclass\>/,/{/ s/^[^[]*\(\[\(.*\)\]\)\?.*/%\2/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    -e 's/,/ /g' \
	    < $(<:%.tex=%.preamble) \
	    | xargs echo -n >> $@
	echo >> $@
	echo -n 'PKG_NAMES = ' >> $@
	sed \
	    -e '/\\usepackage\>.*{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e '/\\usepackage\>/,/{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    < $(<:%.tex=%.preamble) \
	    | xargs echo -n >> $@
	echo >> $@
	echo -n 'IDX_FILES = ' >> $@
	sed \
	    -e 's/^.*\\makeglossary\>.*/%$(<:%.tex=%.glo)/' \
	    -e 's/^.*\\makeindex\>.*/%$(<:%.tex=%.idx)/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    < $(<:%.tex=%.preamble) \
	    | xargs echo -n >> $@
	echo >> $@
	echo -n 'INC_FILES = ' >> $@
	sed \
	    -e '/\\include\>.*{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e '/\\include\>/,/{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1.tex/' \
	    < $(<:%.tex=%.body) \
	    | xargs echo -n >> $@
	echo >> $@
	echo -n 'INP_FILES_$(<:%.tex=%)=' >> $@
	sed \
	    -e '/\\input\>.*{/ s/^[^{]*{\([^}]*\)}.*/%\1.tex/' \
	    -e '/\\input\>/,/{/ s/^[^{]*{\([^}]*\)}.*/%\1.tex/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    < $(<:%.tex=%.body) \
	    | xargs echo -n >> $@
	echo >> $@
	echo -n 'GRF_FILES_$(<:%.tex=%)=' >> $@
	sed \
	    -e '/\\includegraphics\>.*{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e '/\\includegraphics\>/,/{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    < $(<:%.tex=%.body) \
	    | xargs echo -n >> $@
	echo >> $@
	echo -n 'PRE_AUX_FILES_$(<:%.tex=%)=' >> $@
	sed \
	    -e 's/^.*\\tableofcontents\>.*/%$(<:%.tex=%.toc)/' \
	    -e 's/^.*\\listoffigures\>.*/%$(<:%.tex=%.lof)/' \
	    -e 's/^.*\\listoftables\>.*/%$(<:%.tex=%.lot)/' \
	    -e 's/^.*\\listofalgorithms\>.*/%$(<:%.tex=%.loa)/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    < $(<:%.tex=%.body) \
	    | xargs echo -n >> $@
	echo >> $@
	echo -n 'PRE_BIB_FILES_$(<:%.tex=%)=' >> $@
	sed \
	    -e '/\\bibliography\>.*{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e '/\\bibliography\>/,/{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e 's/^.*\\\>.*/%$(<:%.tex=%.bbl)/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    -e 's/,/ /' \
	    < $(<:%.tex=%.body) \
	    | xargs echo -n >> $@
	echo >> $@
	echo -n 'PRE_BBL_FILES_$(<:%.tex=%)=' >> $@
	sed \
	    -e 's/^.*\\bibliography\>.*/%$(<:%.tex=%.bbl)/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    < $(<:%.tex=%.body) \
	    | xargs echo -n >> $@
	echo >> $@
	rm -f $(<:%.tex=%.stripped) $(<:%.tex=%.preamble) $(<:%.tex=%.body)

%.d:									\
		%.tex
	@echo
	@echo '#Rebuilding dependencies for included file: $<'
	sed \
	    -e 's/\\\\//g' \
	    -e 's/\\%//g' \
	    -e 's/^\([^%]*\)%.*/\1/' \
	    -e 's/^.*\\verb\>.*//' \
	    -e '/\\begin{verbatim\*\?}/,/\\end{verbatim\*\?}/ s/.*//' \
	    < $< \
	    > $(<:%.tex=%.body)
	echo '### ALB LATEX MAGIC' > $@
	echo '# This makefile describes '$<'.' >> $@
	echo '# It is generated and overwritten by make(1).' >> $@
	echo '# Do not edit by hand.' >> $@
	echo -n 'INP_FILES_$(<:%.tex=%)=' >> $@
	sed \
	    -e '/\\input\>.*{/ s/^[^{]*{\([^}]*\)}.*/%\1.tex/' \
	    -e '/\\input\>/,/{/ s/^[^{]*{\([^}]*\)}.*/%\1.tex/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    < $(<:%.tex=%.body) \
	    | xargs echo -n >> $@
	echo >> $@
	echo -n 'GRF_FILES_$(<:%.tex=%)=' >> $@
	sed \
	    -e '/\\includegraphics\>.*{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e '/\\includegraphics\>/,/{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    < $(<:%.tex=%.body) \
	    | xargs echo -n >> $@
	echo >> $@
	echo -n 'PRE_AUX_FILES_$(<:%.tex=%)=' >> $@
	sed \
	    -e 's/^.*\\tableofcontents\>.*/%$(<:%.tex=%.toc)/' \
	    -e 's/^.*\\listoffigures\>.*/%$(<:%.tex=%.lof)/' \
	    -e 's/^.*\\listoftables\>.*/%$(<:%.tex=%.lot)/' \
	    -e 's/^.*\\listofalgorithms\>.*/%$(<:%.tex=%.loa)/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    < $(<:%.tex=%.body) \
	    | xargs echo -n >> $@
	echo >> $@
	echo -n 'PRE_BIB_FILES_$(<:%.tex=%)=' >> $@
	sed \
	    -e '/\\bibliography\>.*{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e '/\\bibliography\>/,/{/ s/^[^{]*{\([^}]*\)}.*/%\1/' \
	    -e 's/^.*\\\>.*/%$(<:%.tex=%.bbl)/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    -e 's/,/ /' \
	    < $(<:%.tex=%.body) \
	    | xargs echo -n >> $@
	echo >> $@
	echo -n 'PRE_BBL_FILES_$(<:%.tex=%)=' >> $@
	sed \
	    -e 's/^.*\\bibliography\>.*/%$(<:%.tex=%.bbl)/' \
	    -e '/%/! d' \
	    -e 's/%\(.*\)/\1/' \
	    < $(<:%.tex=%.body) \
	    | xargs echo -n >> $@
	echo >> $@
	rm -f $(<:%.tex=%.body)

#
# Rules for LaTeX source in 3 passes
#
# The makefile rules manage LaTeX convergence in 3 passes as follows:
#
#   + '%.pass_1' marks a single execution of LaTeX on a master file, so
#     that all LaTeX generated files are available;
#
#   + '%.pass_2' marks the point at which both LaTeX and BibTeX have
#     executed sufficient passes so that all cross references have
#     stabilised; and
#
#   + '%.pdf' marks the point at which LaTeX, BibTeX, and makeindex have
#     executed sufficient passes so that the document is finalized.
#
# Since each pass regenerates many files, the rule in each pass touches
# affected files to reconfirm the dependency ordering between the
# passes.

#
# Document finalized to include indices

$(TEX_MASTER:%.tex=%.pdf): \
%.pdf:									\
		$(TEX_MASTER:%.tex=%.pass_2) $(IND_FILES)
	@echo
	@echo '# Finalizing: $@: $^'
	if [ -n '$(strip $(IND_FILES))' ] ; \
	then \
	    $(PDFLATEX) $(@:%.pdf=%.tex) ; \
	fi
	if grep -q \
		-e '^LaTeX Warning: Label.*changed' \
		$(@:%.pdf=%.log) ; then \
	    $(PDFLATEX) $(@:%.pdf=%.tex) ; \
	fi
	if grep -q \
		-e '^LaTeX Warning: Label.*changed' \
		$(@:%.pdf=%.log) ; then \
	    $(PDFLATEX) $(@:%.pdf=%.tex) ; \
	fi
	$(TOUCH) $(AUX_FILES)
	$(TOUCH) $(BBL_FILES)
	$(TOUCH) $(IDX_FILES)
	$(TOUCH) $(IND_FILES)
	$(TOUCH) $@

#
# Document converged to front matter and bibliography

.INTERMEDIATE:		$(TEX_MASTER:%.tex=%.pass_2)

$(IDX_FILES):								\
		$(TEX_MASTER:%.tex=%.pass_2)

$(TEX_MASTER:%.tex=%.pass_2):						\
		$(AUX_FILES) $(BBL_FILES)
	@echo
	@echo '# Converging to front matter: $@: $^'
	if grep -q \
		-e '^LaTeX Warning: \(Label\|Reference\)' \
		-e '^\(LaTeX\|Package natbib\) Warning: Citation' \
		$(@:%.pass_2=%.log) ; then \
	    $(PDFLATEX) $(@:%.pass_2=%.tex) ; \
	fi
	if grep -q \
		-e '^LaTeX Warning: \(Label\|Reference\)' \
		-e '^\(LaTeX\|Package natbib\) Warning: Citation' \
		$(@:%.pass_2=%.log) ; then \
	    $(PDFLATEX) $(@:%.pass_2=%.tex) ; \
	fi
	if grep -q \
		-e '^LaTeX Warning: There were.*\(labels\|references\)' \
		$(@:%.pass_2=%.log) ; then \
	    echo -e '\n\nError: Multiple-/un- defined labels' >&2 ; \
	    cat $(@:%.pass_2=%.log) \
		| grep \
		    -e '^LaTeX Warning: \(Label\|Reference\)' \
		    -e '^.*\(multiply \|un\)defined' \
		| sed -e 's/LaTeX Warning/Error/' >&2 ; \
	    echo -e '\n' >&2 ; \
	    exit 1 ; \
	fi
	if grep -q \
		-e '^LaTeX Warning: Label.*changed' \
		$(@:%.pass_2=%.log) ; then \
	    $(PDFLATEX) $(@:%.pass_2=%.tex) ; \
	fi
	$(TOUCH) $(AUX_FILES)
	$(TOUCH) $(BBL_FILES)
	$(TOUCH) $(IDX_FILES)

#
# Document compiled to generate intermediate files

.INTERMEDIATE:		$(TEX_MASTER:%.tex=%.pass_1)

$(AUX_FILES):								\
		$(TEX_MASTER:%.tex=%.pass_1)

$(TEX_MASTER:%.tex=%.pass_1):						\
		$(TEX_MASTER) $(INC_FILES) $(INP_FILES) $(GRF_FILES)
	@echo
	@echo '# Generating intermediate files: $@: $^'
	$(PDFLATEX) $(@:%.pass_1=%)
	if grep -q \
		-e '^\(LaTeX\|Package [0-9A-Za-z_-]\+\) Error:' \
		$(@:%.pass_1=%.log) ; then \
	    echo -e \
		'\n\nError: $(@:%.pass_1=%.log): ' \
		'Unrecoverable TeX/LaTeX errors\n' >&2 ; \
	    exit 1 ; \
	fi
	$(TOUCH) $(AUX_FILES)
	if ! grep -q \
		-e '^\(LaTeX\|Package natbib\) Warning: Citation' \
		$(@:%.pass_1=%.log) ; then \
	    $(TOUCH) $(BBL_FILES); \
	fi

#
# Bibliography source

%.bbl:									\
		%.aux $(BIB_FILES)
	@echo
	@echo '# Generating bibliography: $@: $^'
	$(BIBTEX) $(@:%.bbl=%)
	if grep -q \
		-e '^Warning' \
		$(@:%.bbl=%.blg) ; then \
	    echo -e \
		'\n\nError: $(@:%.bbl=%.blg): ' \
		'Unrecoverable BibTeX errors\n' >&2 ; \
	    exit 1 ; \
	fi

#
# Glossary source

%.gls:									\
		%.glo
	@echo
	@echo '# Generating glossary: $@: $^'
	$(MAKEINDEX) \
		-s $(CLS_NAME)-glossary.ist \
		-o $@ $<

#
# Index source

%.ind:									\
		%.idx
	@echo
	@echo '# Generating index: $@: $^'
	$(MAKEINDEX) \
		-s $(CLS_NAME)-index.ist \
		-o $@ $<
