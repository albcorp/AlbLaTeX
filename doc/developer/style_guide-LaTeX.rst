======================
Style Guide for LaTeX
======================

:Precis: A style guide for LaTeX documents and packages, and BibTeX databases
:Authors: Andrew Lincoln Burrow
:Contact: albcorp@gmail.com
:Copyright: 2012 Andrew Lincoln Burrow
:License:
    Permission is granted to copy, distribute and/or modify this
    document under the terms of the GNU Free Documentation License,
    Version 1.3 or any later version published by the Free Software
    Foundation; with no Invariant Sections, no Front-Cover Texts, and no
    Back-Cover Texts.

    The latest version of this license is in
    http://www.gnu.org/copyleft/fdl.html

-----------
Style Guide
-----------

The following style guide covers the formatting of LaTeX documents and
packages, and BibTeX databases.  It covers the layout and formatting of
LaTeX and BibTeX source code, its comments, and the naming of macros,
commands, and environments.  It is not a general writing style guide.

File Names
==========

The first structure that is apparent in any collection of source code
are the filenames.  To start with, we follow the GNU convention and use
the term *file name* to refer to the name of a file or directory, and
reserve the term *path* in the case of search path.  In this case, the
issues are: file name capitalisation, and file name generation.

File Name Capitalisation
------------------------

Capitalisation is used to distinguish between directories, and files.
Directories are capitalised in *StudlyCaps*.  Files are written in lower
case with hyphen separators.  Since the underscore is a control
character in TeX, care must be taken in filenames.  Therefore, package
files and document files are distinguished by the selection of the
separator.  For package files, including style files and document
classes, the hyphen is used.  For documents, the underscore is used.

File Name Generation
--------------------

If using AUCTeX, a special utility is provided to generate the filenames
of LaTeX input files.  The `alb-LaTeX-find-file` function prompts for a
title string, constructs the basename of the file by a process of
abbreviation, and then visits the file with a ``.tex`` extension.

File Name Extensions
--------------------

LaTeX processing generates many intermediate files with filenames formed
by substituting the extension of the input file.  Furthermore, some of
these extensions are a consequence of macro definitions.  Therefore, it
is worthwhile commenting on common extensions.

``.cls``
    (system) A LaTeX document class defining the appearance of a class
    of documents.

``.sty``
    (system) A LaTeX style file defining a package of LaTeX commands and
    environments.

``.tex``
    (input) A LaTeX source file from which a document will be
    generated.

``.bib``
    (input) A BibTeX database file in which bibliographic data is
    stored.

``.dvi``
    (compiled) A compiled document.  This extension is now uncommon,
    because PDF has replaced this format.

``.pdf``
    (compiled) A compiled document or includable image.  If the basename
    corresponds to a LaTeX source file, then it is the first case.
    However, PDF is also the preferred format for graphics inclusion.

``.d``
    (generated) A record of dependencies in the LaTeX source file as
    generated by the Makefile distributed in `AlbLaTeXDocumentTemplate`.

``.aux``
    (generated) A record of reference information in the LaTeX source
    file as generated by LaTeX.

``.log``
    (generated) A log of processing of the document by LaTeX.

``.bbl``
    (generated) A list of bibliographic information cited in the
    document as generated by BibTeX.

``.blg``
    (generated) A log of processing of bibliographic information in the
    document as generated by BibTeX.

``.toc``
    (generated) The table of contents of the document generated by
    LaTeX.

``.lof``, ``.loa``
    (generated) The list of figures and algorithms in the document as
    generated by LaTeX.  Note that these extensions are programmed in
    the definitions in the preamble of a large document.

Structure of LaTeX Code
=======================

How to organise a document.  Where to put whitespace.  How to break
lines.  How to comment section breaks and macro definitions.  How to
name macros, commands, and environments.

Header Comments
---------------

Each LaTeX source file begins with a header comment containing a short
description of the file formatted in reStructuredText.  It should begin
with a oneline description, the authors and their contact email, and the
copyright.

For example::

    %
    % :Precis: Source file for LaTeX article
    % :Contact: albcorp@gmail.com
    % :Authors: Andrew Burrow
    % :Copyright: 2012 Andrew Burrow
    %

Local Variables
---------------

If using AUCTeX, there are special considerations for the Local
Variables section at the end of each input file.  Key variables can be
set here to control the behaviour of AUCTeX, including the mode, master
file, and instructions on whether to auto generate style files.

For an article or the master file of a book, the =TeX-master= is the
file itself, while the defaults for =TeX-auto-save= are appropriate.
Example::

    % Local Variables:
    % mode: latex
    % TeX-master: t
    % ispell-local-dictionary: "british"
    % End:

For a chapter in a book, the =TeX-master= should name the master file,
and we do not need the auto generated information, since all the
commands will be in the master document.  Example::

    % Local Variables:
    % mode: latex
    % TeX-master: "alb-latex-document-book"
    % TeX-auto-save: nil
    % ispell-local-dictionary: "british"
    % End:

For a style file or document class, we want to supress all auto
generated style information, since they will be hand made.  Example::

    % Local Variables:
    % mode: latex
    % TeX-master: t
    % TeX-parse-self: nil
    % TeX-auto-save: nil
    % End:

Master File and File Inclusion
------------------------------

A short LaTeX document, such as an article or letter, should be placed
in a single file, while a long LaTeX document, such as a book or a
collection of papers, should be split over several files.  In the second
case, the point of division is important, since some results will be
cached between processing runs.  The appropriate separation point is a
chapter, or collection of chapters.  Therefore, we next consider the
structure of a master file, and then the structure of a chapter file.

The master file layout should reflect the division of a document into
the preamble and ``document`` environment.

The document class specification should be placed immediately after the
header comments.  For example::

    \documentclass[10pt,a3paper,landscape,twocolumn]{sia-article}

The content between the document class specification and the opening of
the ``document`` environment is the /preamble/.  It includes
``usepackage`` commands, and new command and environment specifications
specific to the document.  The following fragment of LaTeX source code
is an example of preamble code::

    %
    % Cross referencing in hypertext environments
    %
    % This should be the one of the last packages loaded
    % See: ``hyperref/manual.pdf``

    \usepackage[
        colorlinks=true, raiselinks=true, plainpages=false,
        bookmarks=true, bookmarksopen=true, bookmarksnumbered=true,
        hyperindex=true, pdftex
      ]{hyperref}

    % Redefine \float@listhead to make PDF bookmarks
    \makeatletter
    \newcounter{alb@ListofI}
    \renewcommand*{\float@listhead}[1]{%
      \chapter*{#1}%
      \@mkboth{\MakeUppercase{#1}}{\MakeUppercase{#1}}%
      \stepcounter{alb@ListofI}%
      \pdfbookmark[0]{#1}{alb-listof-\alph{alb@ListofI}}%
    }
    \makeatother

The close of the preamble should be marked by a comment which draws a
line across the page.  For example, the following fragment marks the end
of the preamble::

    %
    % ------------------------------------------------------------------
    %

    \begin{document}

By contrast, chapters and other included information do not have a
preamble, but just contain the source of the chapter.

Section Comments
----------------

It is useful to clarify the structure of the document by comments that
make it easier to locate section breaks.  Therefore, each of the
chapter, section, and subsection commands should be highlighted by a
preceding comment as follows.

``chapter``
    Three leading lines, one following line, and upper case.

    Example::

        %
        %
        %
        % INTRODUCTION
        %

        \chapter{Introduction}

``section``
    Two leading lines, one following line, and capitalised.

    Example::

        %
        %
        % How to Read This Book
        %

        \section{How to Read This Book}

``subsection``
    One leading line, no following lines, and capitalised.

    Example::

        %
        % Presentation of Mathematics

        \subsection{Presentation of Mathematics}

Whitespace
----------

Whitespace is complicated in LaTeX, because it is significant at certain
points in the code.  It should be noted that whitespace can be
suppressed from the input to the processing stream by finishing a line
with a comment character.

**Example.** The following LaTeX fragment ensures that no unintended
whitespace slips into the macro definition::

    \newcommand{\albIrise}[1]{%
      \operatorname{irise}(#1)%
    }

Having noted these special cases, the style rules for whitespace can be
stated.  All trailing whitespace is removed, and all leading whitespace
is converted to spaces.  Each block is indented by 2 spaces.  Between
paragraphs and structures, a single blank line is used, but no blank
line is inserted between the opening macro of an environment and the
initial content, nor the final content and the closing macro of an
environment.

**Example.** The following LaTeX fragment marks up a small list::

    \begin{albPropositions}
    \item Let $\approx$ be the binary relation such that $x \approx y$
      if and only if $x \lhd y$ and $y \lhd x$.  Then, $\approx$ is an
      equivalence relation.

    \item Let $C = \{ \albEquivClass{x} \mid x \in P \}$, and let $\leq$
      be the binary relation such that $\albEquivClass{x} \leq
      \albEquivClass{y}$ if and only if $x \lhd y$.  Then, $\leq$ is a
      partial order.
    \end{albPropositions}

Likewise comments indicating a document section are separated from
content by a single blank line, but comments for the coding of a macro
are placed without trailing whitespace.

**Example.** The following LaTeX fragment illustrates the markup of a
section level heading::

    %
    %
    % Introduction
    %

    \section{Introduction}
    \label{sec:alb-latex-package-examples:intr}

    The \texttt{alb-latex-package} package does something.  To do this
    it provides some things.

**Example.** The following LaTeX fragment illustrates a the markup of a
macro definition::

    %
    % \listofalgorithms command.
    %
    % Generate a list of the algorithm float environments in the document.
    % The command is analagous to the built-in LaTeX commands \listoffigures
    % and \listoftables

    % Define the title for the list.
    \newcommand{\listalgorithmname}[0]{List of Algorithms}

    % Wrap the definition to ensure 'twocolumn' is handled correctly.
    \newcommand{\listofalgorithms}[0]{%
      \ifthenelse{\boolean{@twocolumn}}{%
        \onecolumn%
        \listof{algorithm}{\listalgorithmname}%
        \twocolumn%
      }{%
        \listof{algorithm}{\listalgorithmname}%
      }%
    }

Line Breaking
-------------

Break all lines to fit an 72 character line.  However, when a line of
LaTeX source is over length due to a complex expression, there are three
choices about how to break the line.

0. **Break the line between distinct tokens**

   In this case, the expression is broken without disturbing a macro.
   This is often possible, and desired for readability within a macro.
   Add a comment character at the break to suppress whitespace, and then
   indent according to the previous line.

   **Example.** The following LaTeX fragment shows a sequence of macros
   where whitespace might disturb the layout::

       \onecolumn%
       \listof{algorithm}{\listalgorithmname}%
       \twocolumn%

1. **Break the line inside a brace**

   In this case, the expression is broken by a newline within a brace
   delimited expression.  Add a comment character at the break to
   suppress unwanted whitespace, and then indent the subexpresssion.

   **Example.** The following LaTeX fragment shows a complex macro
   definition where whitespace would disturb the meaning::

       % Wrap the definition to ensure 'twocolumn' is handled correctly
       \newcommand{\listofalgorithms}[0]{%
         \ifthenelse{\boolean{@twocolumn}}{%
           \onecolumn%
           \listof{algorithm}{\listalgorithmname}%
           \twocolumn%
         }{%
           \listof{algorithm}{\listalgorithmname}%
         }%
       }

   **Example.** The following LaTeX fragment shows a complex macro call
   involving optional arguments.  The break can also be made here.  In
   this case, it is known that whitespace does not affect meaning.  Note
   that this case must be hand indented for readability::

       \usepackage[
           colorlinks=true, raiselinks=true, plainpages=false,
           bookmarks=true, bookmarksopen=true, bookmarksnumbered=true,
           hyperindex=true, pdftex
         ]{hyperref}

2. **Break the line between braces**

   In this case, the expression is broken between top-level
   subexpressions.  Add a comment character at the break to suppress
   unwanted whitespace, but do not the subexpression.  It is best to use
   this style sparingly and not mix this style with others to aid
   readability.

   **Example.** The following LaTeX fragment shows a long macro
   call where whitespace would disturb the meaning::

       % Assumed Algorithm: pop an element from the front of the
       % non-empty heap #1
       \albNewProcedureIdent%
       {\prcPopFrontOfHeapId}{\prcPopFrontOfHeap}%
       {Pop-Front-Of-Heap}{1}

Comments
--------

As noted above comments are used for two purposes.  In the preamble,
they are used to explain the purpose of package inclusions, and to
document new macros, commands, and environments.  In the document, they
are used to make the structure of the source document more apparent.

Do not finish a comment by a period.  Start each comment with a capital.
Use just the markup for literals in comments to clarify reference to
filenames, macros, commands, or environments.

Use ``XXX`` as a shriek as the first word on a comment if it flags a
piece of code that should be repaired.  Do not overuse ``XXX``.

Macro, Command, and Environment Names
-------------------------------------

LaTeX is extended by the definition of new TeX macros, LaTeX commands,
and LaTeX environments.  There are a few comments that can be made about
the naming of these functions.

* Do not use underscores in names.  Instead use lower studly caps, e.g.,
  ``albAlgIndent``.
* The ``@`` letter is reserved for use in the names of implementation
  details.  In fact it is protected by definition as a symbol.
* Use a prefix, as there are no namespaces.  I use ``alb``.

Structure of BibTeX Code
========================

How to capitalise titles.  How to specify names.  What to put in an
entry.

How to Capitalise Titles
------------------------

BibTeX will dispense with unneeded capitals as required.  Furthermore,
Because of prepositional verbs, it is very difficult to write an
algorithm to correctly capitalise.  Instead, you should capitalise
according to the following rules, and let BibTeX down convert to
sentence capitalistion.

- Capitalise:

  + the first word of the title;
  + the first word after a colon;
  + the second elements of hyphenated terms, unless it modifies the
    first element, or both constitute a single word; and
  + all other words except articles, unstressed prepositions, and
    conjunctions.

- Enclose words that must remain capitalised in braces.

**Examples**

- Allegories of Space: The Question of Spatiality in Computer Games
- {ACM} Transactions on Programming Languages and Systems
- Functions as Passive Constraints in {LIFE}

How to Specify Names
--------------------

BibTeX parses author and editor names to determine the surname.
However, it is more reliable if written in the form surname, first
names, etc.  Care must also be taken with the uncapitalised parts of
some names such as *van*.  This is easiest to show by example.

**Examples**

- San Martino, Maria
- von Mannheim, Richard
- Shipman, III, Frank M.

What to Put in an Entry
-----------------------

There are a multitude of possible fields.  Therefore, I suggest a
simplified system of field usage that also includes covers the early
capture of bibliographic data.

Each entry **must** contain the fields ``author``, ``title``, and
``year``, where year refers to the date of the publication or
conference.  The following describes the additional fields for each
commonly encountered entry type.

``Article``
    :``journal``: Full journal title
    :``volume``: Volume in which article appears
    :``number``: Issue in which article appears
    :``pages``: Pages on which article appears
    :``issn``: ISSN of journal

``Book``
    :``publisher``: Publisher of book
    :``isbn``: ISBN of book

``InProceedings``
    :``booktitle``: Title of proceedings written in the form:
         CONFERENCE_ABBREV 'YEAR_ABBREV: Proceedings of
         CONFERENCE_NUMBER nth CONFERENCE_NAME
    :``pages``: Pages on which paper appears in printed proceedings
    :``address``: Location of conference
    :``publisher``: Publisher of proceedings
    :``isbn``: ISBN of proceedings

``InCollection``
    :``booktitle``: Title of collection
    :``pages``: Pages on which paper appears in printed collection
    :``publisher``: Publisher of collection
    :``isbn``: ISBN of collection

``PhdThesis``, ``MastersThesis``
    :``school``: Awarding institution
    :``address``: Address of awarding institution

``TechReport``
    :``institution``: Institution issuing the technical report
    :``number``: Identifying number in the series
    :``address``: Address of institution issuing the technical report

.. Local Variables:
.. mode: rst
.. ispell-local-dictionary: "british"
.. End:
